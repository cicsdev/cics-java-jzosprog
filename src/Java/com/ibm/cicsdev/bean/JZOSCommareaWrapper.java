
/* Licensed Materials - Property of IBM                                   */
/*                                                                        */
/* SAMPLE                                                                 */
/*                                                                        */
/* (c) Copyright IBM Corp. 2016 All Rights Reserved                       */       
/*                                                                        */
/* US Government Users Restricted Rights - Use, duplication or disclosure */
/* restricted by GSA ADP Schedule Contract with IBM Corp                  */
/*                                                                        */

package com.ibm.cicsdev.bean;
import java.math.BigDecimal;
import com.ibm.jzos.fields.*;

// Generated by com.ibm.jzos.recordgen.cobol.RecordClassGenerator on Wed Apr 27 23:07:07 BST 2016

public class JZOSCommareaWrapper {
	protected static CobolDatatypeFactory factory = new CobolDatatypeFactory();
	static { factory.setStringTrimDefault(false); } 

	/** <pre>
	 01 DFHCOMMAREA. </pre> */
	public static final int DFHCOMMAREA_In__len = 104; 

	/** <pre>
	     03  DATA-PAYLOAD. </pre> */
	public static final int DATA_PAYLOAD_len = 104; 
	public static final int DATA_PAYLOAD_offset = factory.getOffset();

	/** <pre>
	        05 BINARY-DIGIT            PIC 9(4)       COMP. </pre> */
	protected static final BinaryAsIntField BINARY_DIGIT = factory.getBinaryAsIntField(4, false);

	/** <pre>
	        05 CHARACTER-STRING        PIC X(30). </pre> */
	protected static final StringField CHARACTER_STRING = factory.getStringField(30);

	/** <pre>
	        05 NUMERIC-STRING          PIC 9(18). </pre> */
	protected static final ExternalDecimalAsLongField NUMERIC_STRING = factory.getExternalDecimalAsLongField(18, false, false, false, false);

	/** <pre>
	        05 PACKED-DIGIT            PIC 9(15)      COMP-3. </pre> */
	protected static final PackedDecimalAsLongField PACKED_DIGIT = factory.getPackedDecimalAsLongField(15, false);

	/** <pre>
	        05 PACKED-DIGIT-WITH-COMMA PIC 9(12)V9(3) COMP-3. </pre> */
	protected static final PackedDecimalAsBigDecimalField PACKED_DIGIT_WITH_COMMA = factory.getPackedDecimalAsBigDecimalField(15, 3, false);

	/** <pre>
	        05 SIGNED-PACKED           PIC S9(12)     COMP-3. </pre> */
	protected static final PackedDecimalAsLongField SIGNED_PACKED = factory.getPackedDecimalAsLongField(12, true);

	/** <pre>
	        05 BOOL                    PIC X. </pre> */
	protected static final StringField BOOL = factory.getStringField(1);

	/** <pre>
	           88 BOOL-FALSE           value X'00'. </pre> */
	/** NOTE: constant values not supported for this field */

	/** <pre>
	           88 BOOL-TRUE            value X'01' through X'FF'. </pre> */
	/** NOTE: constant values not supported for this field */

	/** <pre>
	        05 RESULT. </pre> */
	public static final int RESULT_len = 30; 
	public static final int RESULT_offset = factory.getOffset();

	/** <pre>
	           09 RESULT-CODE          PIC S9(5)      VALUE +0. </pre> */
	protected static final ExternalDecimalAsIntField RESULT_CODE = factory.getExternalDecimalAsIntField(5, true, true, false, false);

	/** <pre>
	           09 RESULT-TEXT          PIC X(25). </pre> */
	protected static final StringField RESULT_TEXT = factory.getStringField(25);

	protected byte[] _byteBuffer;
	// Instance variables used to cache field values
	protected Integer binaryDigit;
	protected String characterString;
	protected Long numericString;
	protected Long packedDigit;
	protected BigDecimal packedDigitWithComma;
	protected Long signedPacked;
	protected String bool;
	protected Integer resultCode;
	protected String resultText;


	public JZOSCommareaWrapper (byte[] buffer) {
		this._byteBuffer = buffer;
	}

	public JZOSCommareaWrapper () {
		this._byteBuffer = new byte[DFHCOMMAREA_In__len];
	}

	public byte[] getByteBuffer() {
		return _byteBuffer;
	}


	public int getBinaryDigit() {
		if (binaryDigit == null) {
			binaryDigit = new Integer(BINARY_DIGIT.getInt(_byteBuffer));
		}
		return binaryDigit.intValue();
	}

	public void setBinaryDigit(int binaryDigit) {
		if (BINARY_DIGIT.equals(this.binaryDigit, binaryDigit)) {
			return;
		}
		BINARY_DIGIT.putInt(binaryDigit, _byteBuffer);
		this.binaryDigit = new Integer(binaryDigit);
	}

	public String getCharacterString() {
		if (characterString == null) {
			characterString = CHARACTER_STRING.getString(_byteBuffer);
		}
		return characterString;
	}

	public void setCharacterString(String characterString) {
		if (CHARACTER_STRING.equals(this.characterString, characterString)) {
			return;
		}
		CHARACTER_STRING.putString(characterString, _byteBuffer);
		this.characterString = characterString;
	}

	public long getNumericString() {
		if (numericString == null) {
			numericString = new Long(NUMERIC_STRING.getLong(_byteBuffer));
		}
		return numericString.longValue();
	}

	public void setNumericString(long numericString) {
		if (NUMERIC_STRING.equals(this.numericString, numericString)) {
			return;
		}
		NUMERIC_STRING.putLong(numericString, _byteBuffer);
		this.numericString = new Long(numericString);
	}

	public long getPackedDigit() {
		if (packedDigit == null) {
			packedDigit = new Long(PACKED_DIGIT.getLong(_byteBuffer));
		}
		return packedDigit.longValue();
	}

	public void setPackedDigit(long packedDigit) {
		if (PACKED_DIGIT.equals(this.packedDigit, packedDigit)) {
			return;
		}
		PACKED_DIGIT.putLong(packedDigit, _byteBuffer);
		this.packedDigit = new Long(packedDigit);
	}

	public BigDecimal getPackedDigitWithComma() {
		if (packedDigitWithComma == null) {
			packedDigitWithComma = PACKED_DIGIT_WITH_COMMA.getBigDecimal(_byteBuffer);
		}
		return packedDigitWithComma;
	}

	public void setPackedDigitWithComma(BigDecimal packedDigitWithComma) {
		if (PACKED_DIGIT_WITH_COMMA.equals(this.packedDigitWithComma, packedDigitWithComma)) {
			return;
		}
		PACKED_DIGIT_WITH_COMMA.putBigDecimal(packedDigitWithComma, _byteBuffer);
		this.packedDigitWithComma = packedDigitWithComma;
	}

	public long getSignedPacked() {
		if (signedPacked == null) {
			signedPacked = new Long(SIGNED_PACKED.getLong(_byteBuffer));
		}
		return signedPacked.longValue();
	}

	public void setSignedPacked(long signedPacked) {
		if (SIGNED_PACKED.equals(this.signedPacked, signedPacked)) {
			return;
		}
		SIGNED_PACKED.putLong(signedPacked, _byteBuffer);
		this.signedPacked = new Long(signedPacked);
	}

	public String getBool() {
		if (bool == null) {
			bool = BOOL.getString(_byteBuffer);
		}
		return bool;
	}

	public void setBool(String bool) {
		if (BOOL.equals(this.bool, bool)) {
			return;
		}
		BOOL.putString(bool, _byteBuffer);
		this.bool = bool;
	}

	public int getResultCode() {
		if (resultCode == null) {
			resultCode = new Integer(RESULT_CODE.getInt(_byteBuffer));
		}
		return resultCode.intValue();
	}

	public void setResultCode(int resultCode) {
		if (RESULT_CODE.equals(this.resultCode, resultCode)) {
			return;
		}
		RESULT_CODE.putInt(resultCode, _byteBuffer);
		this.resultCode = new Integer(resultCode);
	}

	public String getResultText() {
		if (resultText == null) {
			resultText = RESULT_TEXT.getString(_byteBuffer);
		}
		return resultText;
	}

	public void setResultText(String resultText) {
		if (RESULT_TEXT.equals(this.resultText, resultText)) {
			return;
		}
		RESULT_TEXT.putString(resultText, _byteBuffer);
		this.resultText = resultText;
	}

}
